pipeline{
    agent {
        docker {
            image 'ubuntu:slim'
            args '-u root:root' 
        }   
     environment {
        FOLDER_NAME= 'api'
        CONTAINER_NAME = 'api-app'
        EXTERNAL_APP_PORT = '5000'
        INTERNAL_APP_PORT = '5000'
        CODE_DIR='movie-land'
        IMAGE_NAME='${FOLDER_NAME}'
        TAG = 'v1.${BUILD_NUMBER}'
        ACCOUNT_NAME= 'yit1977ltld/apiproject'
        REGISTRY= 'hub.docker.com'
        DOCKERHUB_CREDENIALS = credentials('DockerCred')

    }    
    stages{
       stage('Setup') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                    apt-get install -y python3 python3-pip
                    apt-get install -y iputils-ping
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                    apt-get update
                    apt-get install -y docker-ce
                    usermod -aG docker jenkins
                    service docker start
                '''
            }
        }        
        stage("build image"){
            steps{
                sh 'pwd'
                sh 'ls -la'
                dir("${FOLDER_NAME}") {
                    sh "docker build -t ${IMAGE_NAME}:${TAG} ."        
                    sh "docker rm -f ${CONTAINER_NAME}"                
                }
            }
            post{
                always{
                    // Delete docker file
                    sh "rm -f Dockerfile "
                }
                success{
                    echo "Api App Build Success"
                }
                failure{
                    echo "oooApi App Build Failure"
                }
            }
        }
        stage("Test Image"){            
            steps{
                    sh "docker run -d --name ${CONTAINER_NAME} -p ${EXTERNAL_APP_PORT}:${INTERNAL_APP_PORT} ${IMAGE_NAME}:${TAG}"   
                    sh "sleep 2 && timeout 5 ping localhost -c 4 -p ${EXTERNAL_APP_PORT}"                 
            }
            post{
                success{
                    echo "API Container is answering - OK"
                }
                failure{
                    echo "API Container is not answering - Failure"
                }
            }                
        }

        stage("Login to DockerHub"){
            steps{
                sh 'echo ${DOCKERHUB_CREDENIALS_USR}'
                sh "echo ${DOCKERHUB_CREDENIALS_PSW} | docker login -u ${DOCKERHUB_CREDENIALS_USR} --password-stdin "
            }
        
        }

         stage("push image"){
            steps{
                sh "docker tag ${IMAGE_NAME}:${TAG} ${ACCOUNT_NAME}:${TAG}"
                sh "docker images"
                sh "docker push ${ACCOUNT_NAME}:${TAG}" 
            }
        
        }
    }
   post{
        always{
            sh 'rm -fr ${FOLDER_NAME}'
            sh "docker rmi -f ${IMAGE_NAME}:${TAG}"
            sh "docker rmi -f ${ACCOUNT_NAME}:${TAG}"
            sh 'docker logout' 
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}