pipeline{
    agent any
    environment {
        FOLDER_NAME= 'api'
        CONTAINER_NAME = 'api-app'
        EXTERNAL_APP_PORT = '5000'
        INTERNAL_APP_PORT = '5000'
        CODE_DIR='movie-land'
        TAG = 'v1.${BUILD_NUMBER}'
        ACCOUNT_NAME= 'yit1977ltld/apiproject'
        IMAGE_NAME = "${ACCOUNT_NAME}:latest"
        REGISTRY= 'hub.docker.com'
        DOCKERHUB_CREDENIALS = credentials('DockerCred')
        SHARED_WORKSPACE = '/var/jenkins_home/workspace/Deploy Enviroment'
        CREDENTIALS_ID = 'devopsSSH'
        USER_NAME = 'ubuntu'
    }    
     stages {
        stage("Terraform Init") {
            steps {
                dir("${SHARED_WORKSPACE}/Terraform") {
                    echo "========Start Terraform Init ========"
                    sh 'terraform init'
                }
            }
            post {
                success {
                    echo "Terraform init successfully"
                }
                failure {
                    echo "Terraform init failed"
                }
            }
        }
        stage("Terraform Apply") {
            steps {
                dir("${SHARED_WORKSPACE}/Terraform") {
                    sh 'pwd'
                    sh 'ls'
                    echo "========Start Terraform Apply to Generate Env ========"
                    script {
                        def terraformPlanOutput = sh(script: 'terraform apply -auto-approve', returnStdout: true).trim()
                        def publicIpMatch = terraformPlanOutput =~ /public_ip\s*=\s*"([0-9\.]+)"/
                        if (publicIpMatch) {
                            env.PUBLIC_IP = publicIpMatch[0][1]
                            echo "Extracted PUBLIC_IP: ${env.PUBLIC_IP}"
                        } else {
                            error("Failed to extract public_ip from terraform plan output")
                        }
                    }
                }
            }
            post {
                success {
                    echo "Terraform Apply successfully"
                }
                failure {
                    echo "Terraform Apply failed"
                }
            }
            
        }
        stage('Update System') {
            steps {
                sshagent(credentials: [CREDENTIALS_ID]) {
                    echo "======== Start Update System ========"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${USER_NAME}@${PUBLIC_IP} <<EOF
                        echo "Connected successfully"
                        pwd
                        sudo apt-get update && sudo apt-get upgrade -y
                        exit
                        EOF
                    """
                }
            }
            post {
                success {
                    echo "System updated successfully"
                }
                failure {
                    echo "System update failed"
                }
            }
        }        
        stage('Install Docker if not installed') {
            steps {
                sshagent(credentials: [CREDENTIALS_ID]) {
                    echo "======== Install Docker If Needed ========"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${USER_NAME}@${PUBLIC_IP} <<EOF
                        pwd
                        if ! command -v docker &> /dev/null; then
                            sudo snap install docker &&
                            sudo systemctl start docker
                        else
                            echo "Docker is already installed."
                        fi
                        exit
                        EOF
                    """
                }
            }
            post {
                success {
                    echo "Install Docker successfully"
                }
                failure {
                    echo "Install Docker failed"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sshagent(credentials: [CREDENTIALS_ID]) {
                    echo "======== Install Dependencies ========"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${USER_NAME}@${PUBLIC_IP} 'sudo apt-get install -qqy apt-transport-https ca-certificates curl gnupg2 software-properties-common wget sudo git'
                    """
                }
            }
            post {
                success {
                    echo "Install Dependencies successfully"
                }
                failure {
                    echo "Install Dependencies failed"
                }
            }             
        }
        stage('Remove Docker Container if exists') {
            steps {
                sshagent(credentials: [CREDENTIALS_ID]) {
                    echo "======== Remove old Container if exists ========"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${USER_NAME}@${PUBLIC_IP} '
                        if sudo docker ps -a --format "{{.Names}}" | grep -Eq "^${CONTAINER_NAME}\$"; then
                            sudo docker rm -f ${CONTAINER_NAME}
                        else
                            echo "Container ${CONTAINER_NAME} does not exist."
                        fi'
                    """
                }
            }
            post {
                success {
                    echo "Remove Docker Container if exists successfully"
                }
                failure {
                    echo "Remove Docker Container if exists failed"
                }
            }  
        }
        stage('Run Docker Container') {
            steps {
                sshagent(credentials: [CREDENTIALS_ID]) {
                    echo "======== Update App Container with the new Version ========"
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${PUBLIC_IP} 'sudo docker run -d --name ${CONTAINER_NAME} -p ${EXTERNAL_APP_PORT}:${INTERNAL_APP_PORT} ${IMAGE_NAME}'
                    """
                }
            }
            post {
                success {
                    echo "Run New Docker Container successfully"
                }
                failure {
                    echo "Run New Docker Container failed"
                }
            }              
        }

        
    }
    post{
         always {
            script {
                if (env.PUBLIC_IP) {
                    echo "Server PUBLIC_IP is : ${PUBLIC_IP}"
                } else {
                    echo "PUBLIC_IP is empty"
                }
            }
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}