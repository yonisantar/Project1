pipeline{
    agent any
    environment {
        FOLDER_NAME= 'api'
        CONTAINER_NAME = 'api-app'
        EXTERNAL_APP_PORT = '5000'
        INTERNAL_APP_PORT = '5000'
        CODE_DIR='movie-land'
        IMAGE_NAME='api'
        TAG = 'v1.${BUILD_NUMBER}'
        ACCOUNT_NAME= 'yit1977ltld/apiproject'
        REGISTRY= 'hub.docker.com'
        DOCKERHUB_CREDENIALS = credentials('DockerCred')
        SHARED_WORKSPACE = '/var/jenkins_home/workspace/Deploy Enviroment'
    }    
     stages {
        stage("Terraform Init") {
            steps {
                dir("${SHARED_WORKSPACE}/Terraform") {
                    sh 'terraform init'
                }
            }
            post {
                success {
                    echo "Terraform init successfully"
                }
                failure {
                    echo "Terraform init failed"
                }
            }
        }
        stage("Terraform Apply") {
            steps {
                dir("${SHARED_WORKSPACE}/Terraform") {
                    sh 'pwd'
                    sh 'ls'
                    script {
                        def terraformPlanOutput = sh(script: 'terraform apply -auto-approve', returnStdout: true).trim()
                        def publicIpMatch = terraformPlanOutput =~ /public_ip\s*=\s*"([0-9\.]+)"/
                        if (publicIpMatch) {
                            env.PUBLIC_IP = publicIpMatch[0][1]
                            echo "Extracted PUBLIC_IP: ${env.PUBLIC_IP}"
                        } else {
                            error("Failed to extract public_ip from terraform plan output")
                        }
                    }
                }
            }
            post {
                success {
                    echo "Terraform Apply successfully"
                }
                failure {
                    echo "Terraform Apply failed"
                }
            }
            
        }
        stage("SSH Connection") {
            steps {
                script {                    
                    sshagent(credentials : ['devopsSSH']) {                        
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${PUBLIC_IP} '
                            sudo apt update && sudo apt upgrade -y &&
                            sudo snap install docker
                            sudo systemctl start docker
                            sudo apt-get install -qqy apt-transport-https ca-certificates curl gnupg2 software-properties-common wget sudo git
                            sudo docker pull ${ACCOUNT_NAME}:latest
                            sudo docker run -d --name ${IMAGE_NAME} -p ${EXTERNAL_APP_PORT}:${INTERNAL_APP_PORT} ${ACCOUNT_NAME}:latest                            ls
                            '
                        """
                    }
                }
            }
            post {
                success {
                    echo "SSH connection successfully established and running api project"
                }
                failure {
                    echo "SSH connection failed"
                }
            }
        }
        
    }
   post{
        always{
            echo "========pipeline Always ========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}